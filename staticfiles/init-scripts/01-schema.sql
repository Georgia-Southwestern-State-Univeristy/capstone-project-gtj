--
-- PostgreSQL database dump
--

-- Dumped from database version 17.2
-- Dumped by pg_dump version 17.2

-- Started on 2025-02-25 19:48:01

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 246 (class 1259 OID 16622)
-- Name: api_cache_table; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.api_cache_table (
    cache_key character varying(255) NOT NULL,
    value text NOT NULL,
    expires timestamp with time zone NOT NULL
);


ALTER TABLE public.api_cache_table OWNER TO postgres;

--
-- TOC entry 224 (class 1259 OID 16412)
-- Name: auth_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO postgres;

--
-- TOC entry 223 (class 1259 OID 16411)
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 226 (class 1259 OID 16420)
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO postgres;

--
-- TOC entry 225 (class 1259 OID 16419)
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 222 (class 1259 OID 16406)
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO postgres;

--
-- TOC entry 221 (class 1259 OID 16405)
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 228 (class 1259 OID 16426)
-- Name: auth_user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL
);


ALTER TABLE public.auth_user OWNER TO postgres;

--
-- TOC entry 230 (class 1259 OID 16434)
-- Name: auth_user_groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_groups (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public.auth_user_groups OWNER TO postgres;

--
-- TOC entry 229 (class 1259 OID 16433)
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 227 (class 1259 OID 16425)
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 232 (class 1259 OID 16440)
-- Name: auth_user_user_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_user_permissions (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_user_user_permissions OWNER TO postgres;

--
-- TOC entry 231 (class 1259 OID 16439)
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 234 (class 1259 OID 16498)
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO postgres;

--
-- TOC entry 233 (class 1259 OID 16497)
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 247 (class 1259 OID 16630)
-- Name: django_cache_table; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_cache_table (
    cache_key character varying(255) NOT NULL,
    value text NOT NULL,
    expires timestamp with time zone NOT NULL
);


ALTER TABLE public.django_cache_table OWNER TO postgres;

--
-- TOC entry 220 (class 1259 OID 16398)
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO postgres;

--
-- TOC entry 219 (class 1259 OID 16397)
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 218 (class 1259 OID 16390)
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO postgres;

--
-- TOC entry 217 (class 1259 OID 16389)
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 235 (class 1259 OID 16526)
-- Name: django_session; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO postgres;

--
-- TOC entry 237 (class 1259 OID 16536)
-- Name: favorites_favorite; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.favorites_favorite (
    id bigint NOT NULL,
    type character varying(10) NOT NULL,
    item_data jsonb NOT NULL,
    created_at timestamp with time zone NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.favorites_favorite OWNER TO postgres;

--
-- TOC entry 236 (class 1259 OID 16535)
-- Name: favorites_favorite_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.favorites_favorite ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.favorites_favorite_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 239 (class 1259 OID 16576)
-- Name: transport_city; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.transport_city (
    id bigint NOT NULL,
    name character varying(100) NOT NULL,
    country character varying(100) NOT NULL,
    transit_website character varying(200) NOT NULL
);


ALTER TABLE public.transport_city OWNER TO postgres;

--
-- TOC entry 238 (class 1259 OID 16575)
-- Name: transport_city_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.transport_city ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.transport_city_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 241 (class 1259 OID 16582)
-- Name: transport_transitline; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.transport_transitline (
    id bigint NOT NULL,
    name character varying(100) NOT NULL,
    line_type character varying(10) NOT NULL,
    description text NOT NULL,
    schedule_url character varying(200) NOT NULL,
    map_url character varying(200) NOT NULL,
    operating_hours character varying(200) NOT NULL,
    frequency character varying(100) NOT NULL,
    city_id bigint NOT NULL
);


ALTER TABLE public.transport_transitline OWNER TO postgres;

--
-- TOC entry 240 (class 1259 OID 16581)
-- Name: transport_transitline_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.transport_transitline ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.transport_transitline_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 243 (class 1259 OID 16590)
-- Name: transport_transitpass; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.transport_transitpass (
    id bigint NOT NULL,
    name character varying(100) NOT NULL,
    pass_type character varying(10) NOT NULL,
    price numeric(10,2) NOT NULL,
    currency character varying(3) NOT NULL,
    purchase_url character varying(200) NOT NULL,
    description text NOT NULL,
    city_id bigint NOT NULL
);


ALTER TABLE public.transport_transitpass OWNER TO postgres;

--
-- TOC entry 242 (class 1259 OID 16589)
-- Name: transport_transitpass_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.transport_transitpass ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.transport_transitpass_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 245 (class 1259 OID 16598)
-- Name: transport_transitstation; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.transport_transitstation (
    id bigint NOT NULL,
    name character varying(100) NOT NULL,
    address character varying(200) NOT NULL,
    latitude numeric(9,6) NOT NULL,
    longitude numeric(9,6) NOT NULL,
    accessibility boolean NOT NULL,
    line_id bigint NOT NULL
);


ALTER TABLE public.transport_transitstation OWNER TO postgres;

--
-- TOC entry 244 (class 1259 OID 16597)
-- Name: transport_transitstation_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.transport_transitstation ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.transport_transitstation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 5076 (class 0 OID 16622)
-- Dependencies: 246
-- Data for Name: api_cache_table; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.api_cache_table (cache_key, value, expires) FROM stdin;
\.


--
-- TOC entry 5054 (class 0 OID 16412)
-- Dependencies: 224
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- TOC entry 5056 (class 0 OID 16420)
-- Dependencies: 226
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- TOC entry 5052 (class 0 OID 16406)
-- Dependencies: 222
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add user	4	add_user
14	Can change user	4	change_user
15	Can delete user	4	delete_user
16	Can view user	4	view_user
17	Can add content type	5	add_contenttype
18	Can change content type	5	change_contenttype
19	Can delete content type	5	delete_contenttype
20	Can view content type	5	view_contenttype
21	Can add session	6	add_session
22	Can change session	6	change_session
23	Can delete session	6	delete_session
24	Can view session	6	view_session
25	Can add favorite	7	add_favorite
26	Can change favorite	7	change_favorite
27	Can delete favorite	7	delete_favorite
28	Can view favorite	7	view_favorite
29	Can add airport	8	add_airport
30	Can change airport	8	change_airport
31	Can delete airport	8	delete_airport
32	Can view airport	8	view_airport
33	Can add ride	9	add_ride
34	Can change ride	9	change_ride
35	Can delete ride	9	delete_ride
36	Can view ride	9	view_ride
37	Can add transit pass	10	add_transitpass
38	Can change transit pass	10	change_transitpass
39	Can delete transit pass	10	delete_transitpass
40	Can view transit pass	10	view_transitpass
41	Can add transit station	11	add_transitstation
42	Can change transit station	11	change_transitstation
43	Can delete transit station	11	delete_transitstation
44	Can view transit station	11	view_transitstation
45	Can add city	12	add_city
46	Can change city	12	change_city
47	Can delete city	12	delete_city
48	Can view city	12	view_city
49	Can add transit line	13	add_transitline
50	Can change transit line	13	change_transitline
51	Can delete transit line	13	delete_transitline
52	Can view transit line	13	view_transitline
\.


--
-- TOC entry 5058 (class 0 OID 16426)
-- Dependencies: 228
-- Data for Name: auth_user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) FROM stdin;
1	pbkdf2_sha256$870000$pDJYonHoJgIYf8ZtmjOjHh$uet24IJGX8oDTVArQg25ulAJf3nmzgsQ3VxjRI6Nj4Q=	2025-02-09 12:53:58.339467-05	f	MsHenryHorse				f	t	2025-02-07 14:31:47.19-05
2	pbkdf2_sha256$870000$zoxS4HUYltQOWsYGwy4xYQ$J+8n3HPFCV+UkRfwuIzCiHqlMlnBxcTfQVew0/2Y3Zw=	2025-02-10 10:03:59.881357-05	f	Georgethemonkey				f	t	2025-02-10 10:03:57.133225-05
\.


--
-- TOC entry 5060 (class 0 OID 16434)
-- Dependencies: 230
-- Data for Name: auth_user_groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- TOC entry 5062 (class 0 OID 16440)
-- Dependencies: 232
-- Data for Name: auth_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- TOC entry 5064 (class 0 OID 16498)
-- Dependencies: 234
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
\.


--
-- TOC entry 5077 (class 0 OID 16630)
-- Dependencies: 247
-- Data for Name: django_cache_table; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_cache_table (cache_key, value, expires) FROM stdin;
:1:gtjgo:hotels:b785dc1606ffc9283cc00fd113f50d1f	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XIwZUkVGVU5EQUJMRV9VUF9UT19ERUFETElORZRzdWhejEBodHRwczovL3Rlc3QuYXBpLmFtYWRldXMuY29tL3YzL3Nob3BwaW5nL2hvdGVsLW9mZmVycy9UODI0N1dEME9XlHVhaF6Mm2h0dHBzOi8vdGVzdC5hcGkuYW1hZGV1cy5jb20vdjMvc2hvcHBpbmcvaG90ZWwtb2ZmZXJzP2hvdGVsSWRzPUJSQVRMU0FCJmFkdWx0cz0yJmNoZWNrSW5EYXRlPTIwMjUtMDItMjMmY2hlY2tPdXREYXRlPTIwMjUtMDItMjQmY3VycmVuY3k9VVNEJnJvb21RdWFudGl0eT0xlHV9lChoAowMaG90ZWwtb2ZmZXJzlGgEfZQoaAKMBWhvdGVslGgHjAhCV0FUTDE1NJRoCYwCQleUaAuMCTcwMDA1MDg3N5RoDYwuQmVzdCBXZXN0ZXJuIFBsdXMgSG90ZWwgJiBTdWl0ZXMgQWlycG9ydCBTb3V0aJRoD4wDQVRMlGgRR0BAzqG1x82KaBJHwFUcKZ2IO6N1aBOIaBRdlH2UKGgXjApLMTBDR1FMQzVMlGgZjAoyMDI1LTAyLTIzlGgbjAoyMDI1LTAyLTI0lGgdjANHT1aUaB99lChoIYwDR09WlGgCjAFDlHVoKYwDR09WlIwKY29tbWlzc2lvbpR9lIwKcGVyY2VudGFnZZSMAjEwlHOMCWJvYXJkVHlwZZSMCUJSRUFLRkFTVJRoJH2UKGgCjANTMUuUaCd9lChoKYwFU1VJVEWUaCtLAWgsjARLSU5HlHVoLn2UKGgwjFtHT1ZUIE1JTElUQVJZIFJBVEUgClNVSVRFLTEgS0lORyBCRUQsTlNNSyxKRVRURUQgVFVCLE1JQ1JGRywKSEkgU1BFRUQsQ09GTUtSLEZVTEwgQlJFQUtGQVNUlGgyjAJFTpR1dWg0fZRoNksCc2g3fZQoaDmMA1VTRJRoO4wFNzUuNjWUaD2MBTkyLjc1lIwFdGF4ZXOUXZR9lChoIYwJVE9UQUxfVEFYlGhUjAUxNy4xMJRoOYwDVVNElIwIaW5jbHVkZWSUiXVhaD99lChoQX2UaDuMBTc1LjY1lHNoRF2UfZQoaEeMCjIwMjUtMDItMjOUaEmMCjIwMjUtMDItMjSUaDuMBTc1LjY1lHVhdXVoTH2UKGhOXZR9lChoLn2UaDCME05PTi1SRUZVTkRBQkxFIFJBVEWUc2hWjAxDQU5DRUxMQVRJT06UdWFoWIwJZ3VhcmFudGVllGhafZRoXIwOTk9OX1JFRlVOREFCTEWUc3VoXoxAaHR0cHM6Ly90ZXN0LmFwaS5hbWFkZXVzLmNvbS92My9zaG9wcGluZy9ob3RlbC1vZmZlcnMvSzEwQ0dRTEM1TJR1YWhejJtodHRwczovL3Rlc3QuYXBpLmFtYWRldXMuY29tL3YzL3Nob3BwaW5nL2hvdGVsLW9mZmVycz9ob3RlbElkcz1CV0FUTDE1NCZhZHVsdHM9MiZjaGVja0luRGF0ZT0yMDI1LTAyLTIzJmNoZWNrT3V0RGF0ZT0yMDI1LTAyLTI0JmN1cnJlbmN5PVVTRCZyb29tUXVhbnRpdHk9MZR1ZS4=	2025-02-23 17:53:15-05
:1:gtjgo:transit_search:e8c812fde22196327992375f4822ce22		2025-02-24 08:36:15-05
:1:gtjgo:transit_search:53d4bd9fc05a90915c7da3b27b524fd8		2025-02-24 08:37:48-05
:1:gtjgo:transit_search:5044070967f6815a30cf98061676966e		2025-02-24 08:38:10-05
:1:gtjgo:transit_search:aabebab39a5d6b23212b2e5241371791		2025-02-24 08:38:20-05
:1:gtjgo:transit_search:51c3eeb69b2020dbbf6e265d6c396401		2025-02-24 08:57:37-05
:1:gtjgo:transit_search:23237d05567a48a0650f3af91954dcd2	gAWV8BMAAAAAAACMFGRqYW5nby5odHRwLnJlc3BvbnNllIwMSHR0cFJlc3BvbnNllJOUKYGUfZQojAdoZWFkZXJzlGgAjA9SZXNwb25zZUhlYWRlcnOUk5QpgZR9lIwGX3N0b3JllH2UjAxjb250ZW50LXR5cGWUjAxDb250ZW50LVR5cGWUjBh0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTiUhpRzc2KMCF9jaGFyc2V0lE6MEV9yZXNvdXJjZV9jbG9zZXJzlF2UjA5faGFuZGxlcl9jbGFzc5ROjAdjb29raWVzlIwMaHR0cC5jb29raWVzlIwMU2ltcGxlQ29va2lllJOUKYGUjAZjbG9zZWSUiYwOX3JlYXNvbl9waHJhc2WUTowKX2NvbnRhaW5lcpRdlEK+EgAAPCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+R1RKIEdPITwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CiAgICAKICAgIDxoZWFkZXI+CiAgICAgICAgPGRpdiBjbGFzcz0idXNlci1hdXRoIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8c3Bhbj5XZWxjb21lLCBHZW9yZ2V0aGVtb25rZXkhPC9zcGFuPgogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvYWNjb3VudHMvbG9nb3V0LyIgbWV0aG9kPSJwb3N0IiBzdHlsZT0iZGlzcGxheTogaW5saW5lOyI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3NyZm1pZGRsZXdhcmV0b2tlbiIgdmFsdWU9IlBOek5lQjhoT2o2cU1STDV6bXBZbkp5em5kQzVFZm8ydW94R3lQT2E3WXg0N29GSUY3aDV2UktpbjJPYTdVSkciPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0Ij5Mb2dvdXQ8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2hlYWRlcj4KCiAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAKPGRpdiBjbGFzcz0idHJhbnNwb3J0LWNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJoZWFkZXIiPgogICAgICAgIDxkaXY+R1RKR28gTG9nbzwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im5hdiI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iPkhvbWU8L2E+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9wbGFuZXMvIj5GbGlnaHRzPC9hPgogICAgICAgICAgICA8YSBocmVmPSIvaG90ZWxzLyI+SG90ZWxzPC9hPgogICAgICAgICAgICA8YSBocmVmPSIvdHJhbnNwb3J0LyI+VHJhbnNwb3J0PC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYXZvcml0ZXMvIj5GYXZvcml0ZXM8L2E+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ic2VhcmNoLWNvbnRhaW5lciI+CiAgICAgICAgPGgxPlB1YmxpYyBUcmFuc3BvcnRhdGlvbiBpbiA8L2gxPgogICAgICAgIDxmb3JtIG1ldGhvZD0iR0VUIiBhY3Rpb249Ii90cmFuc3BvcnQvc2VhcmNoLXRyYW5zcG9ydC8iIGNsYXNzPSJzZWFyY2gtZm9ybSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgCiAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0iY2l0eSIgCiAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIGNpdHkgbmFtZSIgCiAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IkFtZXJpY3VzIgogICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkIAogICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWFyY2gtaW5wdXQiPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJzZWFyY2gtYnV0dG9uIj5VcGRhdGUgU2VhcmNoPC9idXR0b24+CiAgICAgICAgPC9mb3JtPgogICAgPC9kaXY+CgogICAgCiAgICAgICAgPGRpdiBjbGFzcz0iZXJyb3ItbWVzc2FnZSI+Tm8gdHJhbnNpdCBzdGF0aW9ucyBmb3VuZDwvZGl2PgogICAgCgogICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibm8tcmVzdWx0cyI+CiAgICAgICAgICAgIDxoMj5ObyB0cmFuc2l0IHN0YXRpb25zIGZvdW5kPC9oMj4KICAgICAgICAgICAgPHA+VHJ5IHNlYXJjaGluZyBmb3IgYSBkaWZmZXJlbnQgY2l0eSBvciBhZGp1c3RpbmcgeW91ciBzZWFyY2ggdGVybXMuPC9wPgogICAgICAgIDwvZGl2PgogICAgCjwvZGl2PgoKPHN0eWxlPgogICAgLnRyYW5zcG9ydC1jb250YWluZXIgewogICAgICAgIG1heC13aWR0aDogMTIwMHB4OwogICAgICAgIG1hcmdpbjogMCBhdXRvOwogICAgICAgIHBhZGRpbmc6IDIwcHg7CiAgICB9CgogICAgLmhlYWRlciB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0OSwgMTgxLCAxNzIpOwogICAgICAgIHBhZGRpbmc6IDE1cHg7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4OwogICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7CiAgICB9CgogICAgLm5hdiBhIHsKICAgICAgICBtYXJnaW46IDAgMTVweDsKICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgY29sb3I6IGJsYWNrOwogICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgfQoKICAgIC5zZWFyY2gtY29udGFpbmVyIHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQ5LCAxODEsIDE3Mik7CiAgICAgICAgcGFkZGluZzogMzBweDsKICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4OwogICAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7CiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgfQoKICAgIC5zZWFyY2gtZm9ybSB7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICBnYXA6IDEwcHg7CiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgbWF4LXdpZHRoOiA2MDBweDsKICAgICAgICBtYXJnaW46IDIwcHggYXV0byAwOwogICAgfQoKICAgIC5pbnB1dC1jb250YWluZXIgewogICAgICAgIGZsZXg6IDE7CiAgICB9CgogICAgLnNlYXJjaC1pbnB1dCB7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgcGFkZGluZzogMTJweDsKICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOwogICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsKICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICB9CgogICAgLnNlYXJjaC1idXR0b24gewogICAgICAgIHBhZGRpbmc6IDEycHggMjRweDsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzOwogICAgICAgIGNvbG9yOiB3aGl0ZTsKICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4OwogICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICB9CgogICAgLnN0YXRpb24tc2VjdGlvbiB7CiAgICAgICAgbWFyZ2luOiA0MHB4IDA7CiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7CiAgICAgICAgcGFkZGluZzogMjBweDsKICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4OwogICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsMCwwLDAuMSk7CiAgICB9CgogICAgLnN0YXRpb24tc2VjdGlvbiBoMiB7CiAgICAgICAgY29sb3I6ICMzMzM7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDsKICAgICAgICBwYWRkaW5nLWJvdHRvbTogMTBweDsKICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgcmdiKDI0OSwgMTgxLCAxNzIpOwogICAgfQoKICAgIC5zdGF0aW9uLXNlY3Rpb24gaDIgaSB7CiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4OwogICAgICAgIGNvbG9yOiByZ2IoMjQ5LCAxODEsIDE3Mik7CiAgICB9CgogICAgLnN0YXRpb25zLWdyaWQgewogICAgICAgIGRpc3BsYXk6IGdyaWQ7CiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maWxsLCBtaW5tYXgoMjgwcHgsIDFmcikpOwogICAgICAgIGdhcDogMjBweDsKICAgIH0KCiAgICAuc3RhdGlvbi1jYXJkIHsKICAgICAgICBiYWNrZ3JvdW5kOiAjZjhmOGY4OwogICAgICAgIHBhZGRpbmc6IDIwcHg7CiAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDsKICAgICAgICBib3gtc2hhZG93OiAwIDJweCA0cHggcmdiYSgwLDAsMCwwLjA1KTsKICAgIH0KCiAgICAuc3RhdGlvbi1jYXJkIGgzIHsKICAgICAgICBtYXJnaW46IDAgMCAxMHB4IDA7CiAgICAgICAgY29sb3I6ICMzMzM7CiAgICB9CgogICAgLnJhdGluZyB7CiAgICAgICAgbWFyZ2luLXRvcDogMTBweDsKICAgICAgICBjb2xvcjogIzY2NjsKICAgIH0KCiAgICAuc3RhcnMgewogICAgICAgIGNvbG9yOiAjZmZkNzAwOwogICAgICAgIG1hcmdpbi1yaWdodDogNXB4OwogICAgfQoKICAgIC5tYXAtY29udGFpbmVyIHsKICAgICAgICBoZWlnaHQ6IDQwMHB4OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgICAgICBtYXJnaW4tdG9wOiAyMHB4OwogICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsMCwwLDAuMSk7CiAgICB9CgogICAgLmVycm9yLW1lc3NhZ2UgewogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZWU7CiAgICAgICAgY29sb3I6ICNjMDA7CiAgICAgICAgcGFkZGluZzogMTVweDsKICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7CiAgICAgICAgbWFyZ2luOiAyMHB4IDA7CiAgICB9CgogICAgLm5vLXJlc3VsdHMgewogICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICBwYWRkaW5nOiA0MHB4OwogICAgICAgIGJhY2tncm91bmQ6IHdoaXRlOwogICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgbWFyZ2luLXRvcDogMjBweDsKICAgIH0KPC9zdHlsZT4KCjwhLS0gQWRkIEZvbnQgQXdlc29tZSBmb3IgaWNvbnMgLS0+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZm9udC1hd2Vzb21lLzUuMTUuNC9jc3MvYWxsLm1pbi5jc3MiPgoKCgogICAgPC9kaXY+CjwvYm9keT4KPC9odG1sPpRhdWIu	2025-02-24 08:58:12-05
:1:gtjgo:transit_search:e5a89d1711c8764b31391c1550b9b775	gAWV+BMAAAAAAACMFGRqYW5nby5odHRwLnJlc3BvbnNllIwMSHR0cFJlc3BvbnNllJOUKYGUfZQojAdoZWFkZXJzlGgAjA9SZXNwb25zZUhlYWRlcnOUk5QpgZR9lIwGX3N0b3JllH2UjAxjb250ZW50LXR5cGWUjAxDb250ZW50LVR5cGWUjBh0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTiUhpRzc2KMCF9jaGFyc2V0lE6MEV9yZXNvdXJjZV9jbG9zZXJzlF2UjA5faGFuZGxlcl9jbGFzc5ROjAdjb29raWVzlIwMaHR0cC5jb29raWVzlIwMU2ltcGxlQ29va2lllJOUKYGUjAZjbG9zZWSUiYwOX3JlYXNvbl9waHJhc2WUTowKX2NvbnRhaW5lcpRdlELGEgAAPCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+R1RKIEdPITwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CiAgICAKICAgIDxoZWFkZXI+CiAgICAgICAgPGRpdiBjbGFzcz0idXNlci1hdXRoIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8c3Bhbj5XZWxjb21lLCBHZW9yZ2V0aGVtb25rZXkhPC9zcGFuPgogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvYWNjb3VudHMvbG9nb3V0LyIgbWV0aG9kPSJwb3N0IiBzdHlsZT0iZGlzcGxheTogaW5saW5lOyI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3NyZm1pZGRsZXdhcmV0b2tlbiIgdmFsdWU9ImN2blBzN05BV1FKdWpRUU5wMHJTa09NSW4zSXRZbGxnUjZsSU1sdHRmdmE4RW5LcXZMalpzV1lyblNVeXIwR1UiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0Ij5Mb2dvdXQ8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2hlYWRlcj4KCiAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAKPGRpdiBjbGFzcz0idHJhbnNwb3J0LWNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJoZWFkZXIiPgogICAgICAgIDxkaXY+R1RKR28gTG9nbzwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im5hdiI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iPkhvbWU8L2E+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9wbGFuZXMvIj5GbGlnaHRzPC9hPgogICAgICAgICAgICA8YSBocmVmPSIvaG90ZWxzLyI+SG90ZWxzPC9hPgogICAgICAgICAgICA8YSBocmVmPSIvdHJhbnNwb3J0LyI+VHJhbnNwb3J0PC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYXZvcml0ZXMvIj5GYXZvcml0ZXM8L2E+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ic2VhcmNoLWNvbnRhaW5lciI+CiAgICAgICAgPGgxPlB1YmxpYyBUcmFuc3BvcnRhdGlvbiBpbiA8L2gxPgogICAgICAgIDxmb3JtIG1ldGhvZD0iR0VUIiBhY3Rpb249Ii90cmFuc3BvcnQvc2VhcmNoLXRyYW5zcG9ydC8iIGNsYXNzPSJzZWFyY2gtZm9ybSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgCiAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0iY2l0eSIgCiAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIGNpdHkgbmFtZSIgCiAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IkFtZXJpY3VzLEdlb3JnaWEiCiAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQgCiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYXJjaC1pbnB1dCI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9InNlYXJjaC1idXR0b24iPlVwZGF0ZSBTZWFyY2g8L2J1dHRvbj4KICAgICAgICA8L2Zvcm0+CiAgICA8L2Rpdj4KCiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJlcnJvci1tZXNzYWdlIj5ObyB0cmFuc2l0IHN0YXRpb25zIGZvdW5kPC9kaXY+CiAgICAKCiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJuby1yZXN1bHRzIj4KICAgICAgICAgICAgPGgyPk5vIHRyYW5zaXQgc3RhdGlvbnMgZm91bmQ8L2gyPgogICAgICAgICAgICA8cD5Ucnkgc2VhcmNoaW5nIGZvciBhIGRpZmZlcmVudCBjaXR5IG9yIGFkanVzdGluZyB5b3VyIHNlYXJjaCB0ZXJtcy48L3A+CiAgICAgICAgPC9kaXY+CiAgICAKPC9kaXY+Cgo8c3R5bGU+CiAgICAudHJhbnNwb3J0LWNvbnRhaW5lciB7CiAgICAgICAgbWF4LXdpZHRoOiAxMjAwcHg7CiAgICAgICAgbWFyZ2luOiAwIGF1dG87CiAgICAgICAgcGFkZGluZzogMjBweDsKICAgIH0KCiAgICAuaGVhZGVyIHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQ5LCAxODEsIDE3Mik7CiAgICAgICAgcGFkZGluZzogMTVweDsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDsKICAgIH0KCiAgICAubmF2IGEgewogICAgICAgIG1hcmdpbjogMCAxNXB4OwogICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICB9CgogICAgLnNlYXJjaC1jb250YWluZXIgewogICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNDksIDE4MSwgMTcyKTsKICAgICAgICBwYWRkaW5nOiAzMHB4OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDsKICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICB9CgogICAgLnNlYXJjaC1mb3JtIHsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGdhcDogMTBweDsKICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICBtYXgtd2lkdGg6IDYwMHB4OwogICAgICAgIG1hcmdpbjogMjBweCBhdXRvIDA7CiAgICB9CgogICAgLmlucHV0LWNvbnRhaW5lciB7CiAgICAgICAgZmxleDogMTsKICAgIH0KCiAgICAuc2VhcmNoLWlucHV0IHsKICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICBwYWRkaW5nOiAxMnB4OwogICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7CiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4OwogICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgIH0KCiAgICAuc2VhcmNoLWJ1dHRvbiB7CiAgICAgICAgcGFkZGluZzogMTJweCAyNHB4OwogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzM7CiAgICAgICAgY29sb3I6IHdoaXRlOwogICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7CiAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgIH0KCiAgICAuc3RhdGlvbi1zZWN0aW9uIHsKICAgICAgICBtYXJnaW46IDQwcHggMDsKICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICAgICAgICBwYWRkaW5nOiAyMHB4OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwwLDAsMC4xKTsKICAgIH0KCiAgICAuc3RhdGlvbi1zZWN0aW9uIGgyIHsKICAgICAgICBjb2xvcjogIzMzMzsKICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogICAgICAgIHBhZGRpbmctYm90dG9tOiAxMHB4OwogICAgICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCByZ2IoMjQ5LCAxODEsIDE3Mik7CiAgICB9CgogICAgLnN0YXRpb24tc2VjdGlvbiBoMiBpIHsKICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7CiAgICAgICAgY29sb3I6IHJnYigyNDksIDE4MSwgMTcyKTsKICAgIH0KCiAgICAuc3RhdGlvbnMtZ3JpZCB7CiAgICAgICAgZGlzcGxheTogZ3JpZDsKICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIG1pbm1heCgyODBweCwgMWZyKSk7CiAgICAgICAgZ2FwOiAyMHB4OwogICAgfQoKICAgIC5zdGF0aW9uLWNhcmQgewogICAgICAgIGJhY2tncm91bmQ6ICNmOGY4Zjg7CiAgICAgICAgcGFkZGluZzogMjBweDsKICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4OwogICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsMCwwLDAuMDUpOwogICAgfQoKICAgIC5zdGF0aW9uLWNhcmQgaDMgewogICAgICAgIG1hcmdpbjogMCAwIDEwcHggMDsKICAgICAgICBjb2xvcjogIzMzMzsKICAgIH0KCiAgICAucmF0aW5nIHsKICAgICAgICBtYXJnaW4tdG9wOiAxMHB4OwogICAgICAgIGNvbG9yOiAjNjY2OwogICAgfQoKICAgIC5zdGFycyB7CiAgICAgICAgY29sb3I6ICNmZmQ3MDA7CiAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7CiAgICB9CgogICAgLm1hcC1jb250YWluZXIgewogICAgICAgIGhlaWdodDogNDAwcHg7CiAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDsKICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAgIG1hcmdpbi10b3A6IDIwcHg7CiAgICAgICAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwwLDAsMC4xKTsKICAgIH0KCiAgICAuZXJyb3ItbWVzc2FnZSB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZlZTsKICAgICAgICBjb2xvcjogI2MwMDsKICAgICAgICBwYWRkaW5nOiAxNXB4OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsKICAgICAgICBtYXJnaW46IDIwcHggMDsKICAgIH0KCiAgICAubm8tcmVzdWx0cyB7CiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgIHBhZGRpbmc6IDQwcHg7CiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7CiAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDsKICAgICAgICBtYXJnaW4tdG9wOiAyMHB4OwogICAgfQo8L3N0eWxlPgoKPCEtLSBBZGQgRm9udCBBd2Vzb21lIGZvciBpY29ucyAtLT4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNS4xNS40L2Nzcy9hbGwubWluLmNzcyI+CgoKCiAgICA8L2Rpdj4KPC9ib2R5Pgo8L2h0bWw+lGF1Yi4=	2025-02-24 08:58:17-05
:1:gtjgo:transit_search:1ff32b8a189a7220cb493f00dd973759	gAWV7xMAAAAAAACMFGRqYW5nby5odHRwLnJlc3BvbnNllIwMSHR0cFJlc3BvbnNllJOUKYGUfZQojAdoZWFkZXJzlGgAjA9SZXNwb25zZUhlYWRlcnOUk5QpgZR9lIwGX3N0b3JllH2UjAxjb250ZW50LXR5cGWUjAxDb250ZW50LVR5cGWUjBh0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTiUhpRzc2KMCF9jaGFyc2V0lE6MEV9yZXNvdXJjZV9jbG9zZXJzlF2UjA5faGFuZGxlcl9jbGFzc5ROjAdjb29raWVzlIwMaHR0cC5jb29raWVzlIwMU2ltcGxlQ29va2lllJOUKYGUjAZjbG9zZWSUiYwOX3JlYXNvbl9waHJhc2WUTowKX2NvbnRhaW5lcpRdlEK9EgAAPCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+R1RKIEdPITwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CiAgICAKICAgIDxoZWFkZXI+CiAgICAgICAgPGRpdiBjbGFzcz0idXNlci1hdXRoIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8c3Bhbj5XZWxjb21lLCBHZW9yZ2V0aGVtb25rZXkhPC9zcGFuPgogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvYWNjb3VudHMvbG9nb3V0LyIgbWV0aG9kPSJwb3N0IiBzdHlsZT0iZGlzcGxheTogaW5saW5lOyI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3NyZm1pZGRsZXdhcmV0b2tlbiIgdmFsdWU9Img4UmVXbERKZDdrUWExenoxMm0zb2MxV3RwSHUySDVxV0pQN2d6akN3TUx1dnl0YzdOZWF3a2RGdGVUenZtcTQiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0Ij5Mb2dvdXQ8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2hlYWRlcj4KCiAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAKPGRpdiBjbGFzcz0idHJhbnNwb3J0LWNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJoZWFkZXIiPgogICAgICAgIDxkaXY+R1RKR28gTG9nbzwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im5hdiI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iPkhvbWU8L2E+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9wbGFuZXMvIj5GbGlnaHRzPC9hPgogICAgICAgICAgICA8YSBocmVmPSIvaG90ZWxzLyI+SG90ZWxzPC9hPgogICAgICAgICAgICA8YSBocmVmPSIvdHJhbnNwb3J0LyI+VHJhbnNwb3J0PC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYXZvcml0ZXMvIj5GYXZvcml0ZXM8L2E+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ic2VhcmNoLWNvbnRhaW5lciI+CiAgICAgICAgPGgxPlB1YmxpYyBUcmFuc3BvcnRhdGlvbiBpbiA8L2gxPgogICAgICAgIDxmb3JtIG1ldGhvZD0iR0VUIiBhY3Rpb249Ii90cmFuc3BvcnQvc2VhcmNoLXRyYW5zcG9ydC8iIGNsYXNzPSJzZWFyY2gtZm9ybSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgCiAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0iY2l0eSIgCiAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIGNpdHkgbmFtZSIgCiAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9Ik9ybGFuZG8iCiAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQgCiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYXJjaC1pbnB1dCI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9InNlYXJjaC1idXR0b24iPlVwZGF0ZSBTZWFyY2g8L2J1dHRvbj4KICAgICAgICA8L2Zvcm0+CiAgICA8L2Rpdj4KCiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJlcnJvci1tZXNzYWdlIj5ObyB0cmFuc2l0IHN0YXRpb25zIGZvdW5kPC9kaXY+CiAgICAKCiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJuby1yZXN1bHRzIj4KICAgICAgICAgICAgPGgyPk5vIHRyYW5zaXQgc3RhdGlvbnMgZm91bmQ8L2gyPgogICAgICAgICAgICA8cD5Ucnkgc2VhcmNoaW5nIGZvciBhIGRpZmZlcmVudCBjaXR5IG9yIGFkanVzdGluZyB5b3VyIHNlYXJjaCB0ZXJtcy48L3A+CiAgICAgICAgPC9kaXY+CiAgICAKPC9kaXY+Cgo8c3R5bGU+CiAgICAudHJhbnNwb3J0LWNvbnRhaW5lciB7CiAgICAgICAgbWF4LXdpZHRoOiAxMjAwcHg7CiAgICAgICAgbWFyZ2luOiAwIGF1dG87CiAgICAgICAgcGFkZGluZzogMjBweDsKICAgIH0KCiAgICAuaGVhZGVyIHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQ5LCAxODEsIDE3Mik7CiAgICAgICAgcGFkZGluZzogMTVweDsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDsKICAgIH0KCiAgICAubmF2IGEgewogICAgICAgIG1hcmdpbjogMCAxNXB4OwogICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICB9CgogICAgLnNlYXJjaC1jb250YWluZXIgewogICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNDksIDE4MSwgMTcyKTsKICAgICAgICBwYWRkaW5nOiAzMHB4OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDsKICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICB9CgogICAgLnNlYXJjaC1mb3JtIHsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGdhcDogMTBweDsKICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICBtYXgtd2lkdGg6IDYwMHB4OwogICAgICAgIG1hcmdpbjogMjBweCBhdXRvIDA7CiAgICB9CgogICAgLmlucHV0LWNvbnRhaW5lciB7CiAgICAgICAgZmxleDogMTsKICAgIH0KCiAgICAuc2VhcmNoLWlucHV0IHsKICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICBwYWRkaW5nOiAxMnB4OwogICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7CiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4OwogICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgIH0KCiAgICAuc2VhcmNoLWJ1dHRvbiB7CiAgICAgICAgcGFkZGluZzogMTJweCAyNHB4OwogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzM7CiAgICAgICAgY29sb3I6IHdoaXRlOwogICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7CiAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgIH0KCiAgICAuc3RhdGlvbi1zZWN0aW9uIHsKICAgICAgICBtYXJnaW46IDQwcHggMDsKICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICAgICAgICBwYWRkaW5nOiAyMHB4OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwwLDAsMC4xKTsKICAgIH0KCiAgICAuc3RhdGlvbi1zZWN0aW9uIGgyIHsKICAgICAgICBjb2xvcjogIzMzMzsKICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogICAgICAgIHBhZGRpbmctYm90dG9tOiAxMHB4OwogICAgICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCByZ2IoMjQ5LCAxODEsIDE3Mik7CiAgICB9CgogICAgLnN0YXRpb24tc2VjdGlvbiBoMiBpIHsKICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7CiAgICAgICAgY29sb3I6IHJnYigyNDksIDE4MSwgMTcyKTsKICAgIH0KCiAgICAuc3RhdGlvbnMtZ3JpZCB7CiAgICAgICAgZGlzcGxheTogZ3JpZDsKICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIG1pbm1heCgyODBweCwgMWZyKSk7CiAgICAgICAgZ2FwOiAyMHB4OwogICAgfQoKICAgIC5zdGF0aW9uLWNhcmQgewogICAgICAgIGJhY2tncm91bmQ6ICNmOGY4Zjg7CiAgICAgICAgcGFkZGluZzogMjBweDsKICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4OwogICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsMCwwLDAuMDUpOwogICAgfQoKICAgIC5zdGF0aW9uLWNhcmQgaDMgewogICAgICAgIG1hcmdpbjogMCAwIDEwcHggMDsKICAgICAgICBjb2xvcjogIzMzMzsKICAgIH0KCiAgICAucmF0aW5nIHsKICAgICAgICBtYXJnaW4tdG9wOiAxMHB4OwogICAgICAgIGNvbG9yOiAjNjY2OwogICAgfQoKICAgIC5zdGFycyB7CiAgICAgICAgY29sb3I6ICNmZmQ3MDA7CiAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7CiAgICB9CgogICAgLm1hcC1jb250YWluZXIgewogICAgICAgIGhlaWdodDogNDAwcHg7CiAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDsKICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAgIG1hcmdpbi10b3A6IDIwcHg7CiAgICAgICAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwwLDAsMC4xKTsKICAgIH0KCiAgICAuZXJyb3ItbWVzc2FnZSB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZlZTsKICAgICAgICBjb2xvcjogI2MwMDsKICAgICAgICBwYWRkaW5nOiAxNXB4OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsKICAgICAgICBtYXJnaW46IDIwcHggMDsKICAgIH0KCiAgICAubm8tcmVzdWx0cyB7CiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgIHBhZGRpbmc6IDQwcHg7CiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7CiAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDsKICAgICAgICBtYXJnaW4tdG9wOiAyMHB4OwogICAgfQo8L3N0eWxlPgoKPCEtLSBBZGQgRm9udCBBd2Vzb21lIGZvciBpY29ucyAtLT4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNS4xNS40L2Nzcy9hbGwubWluLmNzcyI+CgoKCiAgICA8L2Rpdj4KPC9ib2R5Pgo8L2h0bWw+lGF1Yi4=	2025-02-24 08:58:28-05
:1:gtjgo:transit_search:1f565988cb19e47c832c8717a4fb479a	gAWV+BMAAAAAAACMFGRqYW5nby5odHRwLnJlc3BvbnNllIwMSHR0cFJlc3BvbnNllJOUKYGUfZQojAdoZWFkZXJzlGgAjA9SZXNwb25zZUhlYWRlcnOUk5QpgZR9lIwGX3N0b3JllH2UjAxjb250ZW50LXR5cGWUjAxDb250ZW50LVR5cGWUjBh0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTiUhpRzc2KMCF9jaGFyc2V0lE6MEV9yZXNvdXJjZV9jbG9zZXJzlF2UjA5faGFuZGxlcl9jbGFzc5ROjAdjb29raWVzlIwMaHR0cC5jb29raWVzlIwMU2ltcGxlQ29va2lllJOUKYGUjAZjbG9zZWSUiYwOX3JlYXNvbl9waHJhc2WUTowKX2NvbnRhaW5lcpRdlELGEgAAPCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+R1RKIEdPITwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CiAgICAKICAgIDxoZWFkZXI+CiAgICAgICAgPGRpdiBjbGFzcz0idXNlci1hdXRoIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8c3Bhbj5XZWxjb21lLCBHZW9yZ2V0aGVtb25rZXkhPC9zcGFuPgogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvYWNjb3VudHMvbG9nb3V0LyIgbWV0aG9kPSJwb3N0IiBzdHlsZT0iZGlzcGxheTogaW5saW5lOyI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3NyZm1pZGRsZXdhcmV0b2tlbiIgdmFsdWU9IjBjS0ZuQTZkNnU1Tmhld096bFRFcnVjTU9raXJZRUVwRk5JeUhPTTZwOXdyQ0xxckY2TEx6Q292Tzl1d3JqWjMiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0Ij5Mb2dvdXQ8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2hlYWRlcj4KCiAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAKPGRpdiBjbGFzcz0idHJhbnNwb3J0LWNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJoZWFkZXIiPgogICAgICAgIDxkaXY+R1RKR28gTG9nbzwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im5hdiI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iPkhvbWU8L2E+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9wbGFuZXMvIj5GbGlnaHRzPC9hPgogICAgICAgICAgICA8YSBocmVmPSIvaG90ZWxzLyI+SG90ZWxzPC9hPgogICAgICAgICAgICA8YSBocmVmPSIvdHJhbnNwb3J0LyI+VHJhbnNwb3J0PC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYXZvcml0ZXMvIj5GYXZvcml0ZXM8L2E+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ic2VhcmNoLWNvbnRhaW5lciI+CiAgICAgICAgPGgxPlB1YmxpYyBUcmFuc3BvcnRhdGlvbiBpbiA8L2gxPgogICAgICAgIDxmb3JtIG1ldGhvZD0iR0VUIiBhY3Rpb249Ii90cmFuc3BvcnQvc2VhcmNoLXRyYW5zcG9ydC8iIGNsYXNzPSJzZWFyY2gtZm9ybSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgCiAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0iY2l0eSIgCiAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIGNpdHkgbmFtZSIgCiAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9Ik9ybGFuZG8sIEZsb3JpZGEiCiAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQgCiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYXJjaC1pbnB1dCI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9InNlYXJjaC1idXR0b24iPlVwZGF0ZSBTZWFyY2g8L2J1dHRvbj4KICAgICAgICA8L2Zvcm0+CiAgICA8L2Rpdj4KCiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJlcnJvci1tZXNzYWdlIj5ObyB0cmFuc2l0IHN0YXRpb25zIGZvdW5kPC9kaXY+CiAgICAKCiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJuby1yZXN1bHRzIj4KICAgICAgICAgICAgPGgyPk5vIHRyYW5zaXQgc3RhdGlvbnMgZm91bmQ8L2gyPgogICAgICAgICAgICA8cD5Ucnkgc2VhcmNoaW5nIGZvciBhIGRpZmZlcmVudCBjaXR5IG9yIGFkanVzdGluZyB5b3VyIHNlYXJjaCB0ZXJtcy48L3A+CiAgICAgICAgPC9kaXY+CiAgICAKPC9kaXY+Cgo8c3R5bGU+CiAgICAudHJhbnNwb3J0LWNvbnRhaW5lciB7CiAgICAgICAgbWF4LXdpZHRoOiAxMjAwcHg7CiAgICAgICAgbWFyZ2luOiAwIGF1dG87CiAgICAgICAgcGFkZGluZzogMjBweDsKICAgIH0KCiAgICAuaGVhZGVyIHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQ5LCAxODEsIDE3Mik7CiAgICAgICAgcGFkZGluZzogMTVweDsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDsKICAgIH0KCiAgICAubmF2IGEgewogICAgICAgIG1hcmdpbjogMCAxNXB4OwogICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICB9CgogICAgLnNlYXJjaC1jb250YWluZXIgewogICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNDksIDE4MSwgMTcyKTsKICAgICAgICBwYWRkaW5nOiAzMHB4OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDsKICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICB9CgogICAgLnNlYXJjaC1mb3JtIHsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGdhcDogMTBweDsKICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICBtYXgtd2lkdGg6IDYwMHB4OwogICAgICAgIG1hcmdpbjogMjBweCBhdXRvIDA7CiAgICB9CgogICAgLmlucHV0LWNvbnRhaW5lciB7CiAgICAgICAgZmxleDogMTsKICAgIH0KCiAgICAuc2VhcmNoLWlucHV0IHsKICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICBwYWRkaW5nOiAxMnB4OwogICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7CiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4OwogICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgIH0KCiAgICAuc2VhcmNoLWJ1dHRvbiB7CiAgICAgICAgcGFkZGluZzogMTJweCAyNHB4OwogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzM7CiAgICAgICAgY29sb3I6IHdoaXRlOwogICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7CiAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgIH0KCiAgICAuc3RhdGlvbi1zZWN0aW9uIHsKICAgICAgICBtYXJnaW46IDQwcHggMDsKICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICAgICAgICBwYWRkaW5nOiAyMHB4OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwwLDAsMC4xKTsKICAgIH0KCiAgICAuc3RhdGlvbi1zZWN0aW9uIGgyIHsKICAgICAgICBjb2xvcjogIzMzMzsKICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogICAgICAgIHBhZGRpbmctYm90dG9tOiAxMHB4OwogICAgICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCByZ2IoMjQ5LCAxODEsIDE3Mik7CiAgICB9CgogICAgLnN0YXRpb24tc2VjdGlvbiBoMiBpIHsKICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7CiAgICAgICAgY29sb3I6IHJnYigyNDksIDE4MSwgMTcyKTsKICAgIH0KCiAgICAuc3RhdGlvbnMtZ3JpZCB7CiAgICAgICAgZGlzcGxheTogZ3JpZDsKICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIG1pbm1heCgyODBweCwgMWZyKSk7CiAgICAgICAgZ2FwOiAyMHB4OwogICAgfQoKICAgIC5zdGF0aW9uLWNhcmQgewogICAgICAgIGJhY2tncm91bmQ6ICNmOGY4Zjg7CiAgICAgICAgcGFkZGluZzogMjBweDsKICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4OwogICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsMCwwLDAuMDUpOwogICAgfQoKICAgIC5zdGF0aW9uLWNhcmQgaDMgewogICAgICAgIG1hcmdpbjogMCAwIDEwcHggMDsKICAgICAgICBjb2xvcjogIzMzMzsKICAgIH0KCiAgICAucmF0aW5nIHsKICAgICAgICBtYXJnaW4tdG9wOiAxMHB4OwogICAgICAgIGNvbG9yOiAjNjY2OwogICAgfQoKICAgIC5zdGFycyB7CiAgICAgICAgY29sb3I6ICNmZmQ3MDA7CiAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7CiAgICB9CgogICAgLm1hcC1jb250YWluZXIgewogICAgICAgIGhlaWdodDogNDAwcHg7CiAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDsKICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAgIG1hcmdpbi10b3A6IDIwcHg7CiAgICAgICAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwwLDAsMC4xKTsKICAgIH0KCiAgICAuZXJyb3ItbWVzc2FnZSB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZlZTsKICAgICAgICBjb2xvcjogI2MwMDsKICAgICAgICBwYWRkaW5nOiAxNXB4OwogICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsKICAgICAgICBtYXJnaW46IDIwcHggMDsKICAgIH0KCiAgICAubm8tcmVzdWx0cyB7CiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgIHBhZGRpbmc6IDQwcHg7CiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7CiAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDsKICAgICAgICBtYXJnaW4tdG9wOiAyMHB4OwogICAgfQo8L3N0eWxlPgoKPCEtLSBBZGQgRm9udCBBd2Vzb21lIGZvciBpY29ucyAtLT4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNS4xNS40L2Nzcy9hbGwubWluLmNzcyI+CgoKCiAgICA8L2Rpdj4KPC9ib2R5Pgo8L2h0bWw+lGF1Yi4=	2025-02-24 08:58:34-05
:1:gtjgo:transit_search:32bd0a72a74b4302b84e26009fac1af8		2025-02-24 08:58:40-05
:1:gtjgo:transit_search:63ad70a8c74be9fd1cdbfd15f64f080b		2025-02-24 09:00:55-05
:1:gtjgo:cities:2fdd28e13aaae4e2be7cbaa0efba7d58	gAWVPRUAAAAAAACMFGRqYW5nby5odHRwLnJlc3BvbnNllIwMSnNvblJlc3BvbnNllJOUKYGUfZQojAdoZWFkZXJzlGgAjA9SZXNwb25zZUhlYWRlcnOUk5QpgZR9lIwGX3N0b3JllH2UjAxjb250ZW50LXR5cGWUjAxDb250ZW50LVR5cGWUjBBhcHBsaWNhdGlvbi9qc29ulIaUc3NijAhfY2hhcnNldJROjBFfcmVzb3VyY2VfY2xvc2Vyc5RdlIwOX2hhbmRsZXJfY2xhc3OUTowHY29va2llc5SMDGh0dHAuY29va2llc5SMDFNpbXBsZUNvb2tpZZSTlCmBlIwGY2xvc2VklImMDl9yZWFzb25fcGhyYXNllE6MCl9jb250YWluZXKUXZRCExQAAFt7InR5cGUiOiAibG9jYXRpb24iLCAic3ViVHlwZSI6ICJDSVRZIiwgIm5hbWUiOiAiQVRMQU5UQSIsICJkZXRhaWxlZE5hbWUiOiAiQVRMQU5UQS9HQS9VUyIsICJpZCI6ICJDQVRMIiwgInNlbGYiOiB7ImhyZWYiOiAiaHR0cHM6Ly90ZXN0LmFwaS5hbWFkZXVzLmNvbS92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvQ0FUTCIsICJtZXRob2RzIjogWyJHRVQiXX0sICJ0aW1lWm9uZU9mZnNldCI6ICItMDU6MDAiLCAiaWF0YUNvZGUiOiAiQVRMIiwgImdlb0NvZGUiOiB7ImxhdGl0dWRlIjogMzMuNjQxMTIsICJsb25naXR1ZGUiOiAtODQuNDIyNzd9LCAiYWRkcmVzcyI6IHsiY2l0eU5hbWUiOiAiQVRMQU5UQSIsICJjaXR5Q29kZSI6ICJBVEwiLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJHQSIsICJyZWdpb25Db2RlIjogIk5BTUVSIn0sICJhbmFseXRpY3MiOiB7InRyYXZlbGVycyI6IHsic2NvcmUiOiA2MH19fSwgeyJ0eXBlIjogImxvY2F0aW9uIiwgInN1YlR5cGUiOiAiQ0lUWSIsICJuYW1lIjogIk5BTlRFUyIsICJkZXRhaWxlZE5hbWUiOiAiTkFOVEVTL0ZSIiwgImlkIjogIkNOVEUiLCAic2VsZiI6IHsiaHJlZiI6ICJodHRwczovL3Rlc3QuYXBpLmFtYWRldXMuY29tL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9DTlRFIiwgIm1ldGhvZHMiOiBbIkdFVCJdfSwgInRpbWVab25lT2Zmc2V0IjogIiswMTowMCIsICJpYXRhQ29kZSI6ICJOVEUiLCAiZ2VvQ29kZSI6IHsibGF0aXR1ZGUiOiA0Ny4xNTMwNiwgImxvbmdpdHVkZSI6IC0xLjYxMDgzfSwgImFkZHJlc3MiOiB7ImNpdHlOYW1lIjogIk5BTlRFUyIsICJjaXR5Q29kZSI6ICJOVEUiLCAiY291bnRyeU5hbWUiOiAiRlJBTkNFIiwgImNvdW50cnlDb2RlIjogIkZSIiwgInJlZ2lvbkNvZGUiOiAiRVVST1AifSwgImFuYWx5dGljcyI6IHsidHJhdmVsZXJzIjogeyJzY29yZSI6IDN9fX0sIHsidHlwZSI6ICJsb2NhdGlvbiIsICJzdWJUeXBlIjogIkNJVFkiLCAibmFtZSI6ICJBTVJJVFNBUiIsICJkZXRhaWxlZE5hbWUiOiAiQU1SSVRTQVIvUEIvSU4iLCAiaWQiOiAiQ0FUUSIsICJzZWxmIjogeyJocmVmIjogImh0dHBzOi8vdGVzdC5hcGkuYW1hZGV1cy5jb20vdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL0NBVFEiLCAibWV0aG9kcyI6IFsiR0VUIl19LCAidGltZVpvbmVPZmZzZXQiOiAiKzA1OjMwIiwgImlhdGFDb2RlIjogIkFUUSIsICJnZW9Db2RlIjogeyJsYXRpdHVkZSI6IDMxLjcwOTczLCAibG9uZ2l0dWRlIjogNzQuNzk3MjN9LCAiYWRkcmVzcyI6IHsiY2l0eU5hbWUiOiAiQU1SSVRTQVIiLCAiY2l0eUNvZGUiOiAiQVRRIiwgImNvdW50cnlOYW1lIjogIklORElBIiwgImNvdW50cnlDb2RlIjogIklOIiwgInN0YXRlQ29kZSI6ICJQQiIsICJyZWdpb25Db2RlIjogIkFTSUEifSwgImFuYWx5dGljcyI6IHsidHJhdmVsZXJzIjogeyJzY29yZSI6IDF9fX0sIHsidHlwZSI6ICJsb2NhdGlvbiIsICJzdWJUeXBlIjogIkNJVFkiLCAibmFtZSI6ICJBVExBTlRJQyBDSVRZIiwgImRldGFpbGVkTmFtZSI6ICJBVExBTlRJQyBDSVRZL05KL1VTIiwgImlkIjogIkNBQ1kiLCAic2VsZiI6IHsiaHJlZiI6ICJodHRwczovL3Rlc3QuYXBpLmFtYWRldXMuY29tL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9DQUNZIiwgIm1ldGhvZHMiOiBbIkdFVCJdfSwgInRpbWVab25lT2Zmc2V0IjogIi0wNTowMCIsICJpYXRhQ29kZSI6ICJBQ1kiLCAiZ2VvQ29kZSI6IHsibGF0aXR1ZGUiOiAzOS40NTc1LCAibG9uZ2l0dWRlIjogLTc0LjU3NzIyfSwgImFkZHJlc3MiOiB7ImNpdHlOYW1lIjogIkFUTEFOVElDIENJVFkiLCAiY2l0eUNvZGUiOiAiQUNZIiwgImNvdW50cnlOYW1lIjogIlVOSVRFRCBTVEFURVMgT0YgQU1FUklDQSIsICJjb3VudHJ5Q29kZSI6ICJVUyIsICJzdGF0ZUNvZGUiOiAiTkoiLCAicmVnaW9uQ29kZSI6ICJOQU1FUiJ9LCAiYW5hbHl0aWNzIjogeyJ0cmF2ZWxlcnMiOiB7InNjb3JlIjogMX19fSwgeyJ0eXBlIjogImxvY2F0aW9uIiwgInN1YlR5cGUiOiAiQ0lUWSIsICJuYW1lIjogIldBVEVSVE9XTiIsICJkZXRhaWxlZE5hbWUiOiAiV0FURVJUT1dOL1NEL1VTIiwgImlkIjogIkNBVFkiLCAic2VsZiI6IHsiaHJlZiI6ICJodHRwczovL3Rlc3QuYXBpLmFtYWRldXMuY29tL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9DQVRZIiwgIm1ldGhvZHMiOiBbIkdFVCJdfSwgInRpbWVab25lT2Zmc2V0IjogIi0wNjowMCIsICJpYXRhQ29kZSI6ICJBVFkiLCAiZ2VvQ29kZSI6IHsibGF0aXR1ZGUiOiA0NC45MTM4OSwgImxvbmdpdHVkZSI6IC05Ny4xNTQ3Mn0sICJhZGRyZXNzIjogeyJjaXR5TmFtZSI6ICJXQVRFUlRPV04iLCAiY2l0eUNvZGUiOiAiQVRZIiwgImNvdW50cnlOYW1lIjogIlVOSVRFRCBTVEFURVMgT0YgQU1FUklDQSIsICJjb3VudHJ5Q29kZSI6ICJVUyIsICJzdGF0ZUNvZGUiOiAiU0QiLCAicmVnaW9uQ29kZSI6ICJOQU1FUiJ9LCAiYW5hbHl0aWNzIjogeyJ0cmF2ZWxlcnMiOiB7InNjb3JlIjogMX19fSwgeyJ0eXBlIjogImxvY2F0aW9uIiwgInN1YlR5cGUiOiAiQ0lUWSIsICJuYW1lIjogIkFUS0EiLCAiZGV0YWlsZWROYW1lIjogIkFUS0EvQUsvVVMiLCAiaWQiOiAiQ0FLQiIsICJzZWxmIjogeyJocmVmIjogImh0dHBzOi8vdGVzdC5hcGkuYW1hZGV1cy5jb20vdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL0NBS0IiLCAibWV0aG9kcyI6IFsiR0VUIl19LCAidGltZVpvbmVPZmZzZXQiOiAiLTEwOjAwIiwgImlhdGFDb2RlIjogIkFLQiIsICJnZW9Db2RlIjogeyJsYXRpdHVkZSI6IDUyLjIsICJsb25naXR1ZGUiOiAtMTc0LjJ9LCAiYWRkcmVzcyI6IHsiY2l0eU5hbWUiOiAiQVRLQSIsICJjaXR5Q29kZSI6ICJBS0IiLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJBSyIsICJyZWdpb25Db2RlIjogIk5BTUVSIn0sICJhbmFseXRpY3MiOiB7InRyYXZlbGVycyI6IHsic2NvcmUiOiAxfX19LCB7InR5cGUiOiAibG9jYXRpb24iLCAic3ViVHlwZSI6ICJDSVRZIiwgIm5hbWUiOiAiQVRNQVVUTFVBSyIsICJkZXRhaWxlZE5hbWUiOiAiQVRNQVVUTFVBSy9BSy9VUyIsICJpZCI6ICJDQVRUIiwgInNlbGYiOiB7ImhyZWYiOiAiaHR0cHM6Ly90ZXN0LmFwaS5hbWFkZXVzLmNvbS92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvQ0FUVCIsICJtZXRob2RzIjogWyJHRVQiXX0sICJ0aW1lWm9uZU9mZnNldCI6ICItMDk6MDAiLCAiaWF0YUNvZGUiOiAiQVRUIiwgImdlb0NvZGUiOiB7ImxhdGl0dWRlIjogNjAuODY2NjcsICJsb25naXR1ZGUiOiAtMTYyLjI3MzF9LCAiYWRkcmVzcyI6IHsiY2l0eU5hbWUiOiAiQVRNQVVUTFVBSyIsICJjaXR5Q29kZSI6ICJBVFQiLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJBSyIsICJyZWdpb25Db2RlIjogIk5BTUVSIn0sICJhbmFseXRpY3MiOiB7InRyYXZlbGVycyI6IHsic2NvcmUiOiAxfX19LCB7InR5cGUiOiAibG9jYXRpb24iLCAic3ViVHlwZSI6ICJDSVRZIiwgIm5hbWUiOiAiQVBQTEVUT04iLCAiZGV0YWlsZWROYW1lIjogIkFQUExFVE9OL1dJL1VTIiwgImlkIjogIkNBVFciLCAic2VsZiI6IHsiaHJlZiI6ICJodHRwczovL3Rlc3QuYXBpLmFtYWRldXMuY29tL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9DQVRXIiwgIm1ldGhvZHMiOiBbIkdFVCJdfSwgInRpbWVab25lT2Zmc2V0IjogIi0wNjowMCIsICJpYXRhQ29kZSI6ICJBVFciLCAiZ2VvQ29kZSI6IHsibGF0aXR1ZGUiOiA0NC4yNTcyMywgImxvbmdpdHVkZSI6IC04OC41MTkxNn0sICJhZGRyZXNzIjogeyJjaXR5TmFtZSI6ICJBUFBMRVRPTiIsICJjaXR5Q29kZSI6ICJBVFciLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJXSSIsICJyZWdpb25Db2RlIjogIk5BTUVSIn0sICJhbmFseXRpY3MiOiB7InRyYXZlbGVycyI6IHsic2NvcmUiOiAxfX19LCB7InR5cGUiOiAibG9jYXRpb24iLCAic3ViVHlwZSI6ICJDSVRZIiwgIm5hbWUiOiAiQVRRQVNVSyIsICJkZXRhaWxlZE5hbWUiOiAiQVRRQVNVSy9BSy9VUyIsICJpZCI6ICJDQVRLIiwgInNlbGYiOiB7ImhyZWYiOiAiaHR0cHM6Ly90ZXN0LmFwaS5hbWFkZXVzLmNvbS92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvQ0FUSyIsICJtZXRob2RzIjogWyJHRVQiXX0sICJ0aW1lWm9uZU9mZnNldCI6ICItMDk6MDAiLCAiaWF0YUNvZGUiOiAiQVRLIiwgImdlb0NvZGUiOiB7ImxhdGl0dWRlIjogNzAuNDcsICJsb25naXR1ZGUiOiAtMTU3LjN9LCAiYWRkcmVzcyI6IHsiY2l0eU5hbWUiOiAiQVRRQVNVSyIsICJjaXR5Q29kZSI6ICJBVEsiLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJBSyIsICJyZWdpb25Db2RlIjogIk5BTUVSIn0sICJhbmFseXRpY3MiOiB7InRyYXZlbGVycyI6IHsic2NvcmUiOiAwfX19LCB7InR5cGUiOiAibG9jYXRpb24iLCAic3ViVHlwZSI6ICJDSVRZIiwgIm5hbWUiOiAiQVRIRU5TIiwgImRldGFpbGVkTmFtZSI6ICJBVEhFTlMvR0EvVVMiLCAiaWQiOiAiQ0FITiIsICJzZWxmIjogeyJocmVmIjogImh0dHBzOi8vdGVzdC5hcGkuYW1hZGV1cy5jb20vdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL0NBSE4iLCAibWV0aG9kcyI6IFsiR0VUIl19LCAidGltZVpvbmVPZmZzZXQiOiAiLTA1OjAwIiwgImlhdGFDb2RlIjogIkFITiIsICJnZW9Db2RlIjogeyJsYXRpdHVkZSI6IDMzLjk0ODYyLCAibG9uZ2l0dWRlIjogLTgzLjMyNjM4fSwgImFkZHJlc3MiOiB7ImNpdHlOYW1lIjogIkFUSEVOUyIsICJjaXR5Q29kZSI6ICJBSE4iLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJHQSIsICJyZWdpb25Db2RlIjogIk5BTUVSIn0sICJhbmFseXRpY3MiOiB7InRyYXZlbGVycyI6IHsic2NvcmUiOiAwfX19XZRhdWIu	2025-02-24 10:42:33-05
:1:gtjgo:cities:920787be0ba4a3939b167d02ddac85c9	gAWV/ggAAAAAAACMFGRqYW5nby5odHRwLnJlc3BvbnNllIwMSnNvblJlc3BvbnNllJOUKYGUfZQojAdoZWFkZXJzlGgAjA9SZXNwb25zZUhlYWRlcnOUk5QpgZR9lIwGX3N0b3JllH2UjAxjb250ZW50LXR5cGWUjAxDb250ZW50LVR5cGWUjBBhcHBsaWNhdGlvbi9qc29ulIaUc3NijAhfY2hhcnNldJROjBFfcmVzb3VyY2VfY2xvc2Vyc5RdlIwOX2hhbmRsZXJfY2xhc3OUTowHY29va2llc5SMDGh0dHAuY29va2llc5SMDFNpbXBsZUNvb2tpZZSTlCmBlIwGY2xvc2VklImMDl9yZWFzb25fcGhyYXNllE6MCl9jb250YWluZXKUXZRC1AcAAFt7InR5cGUiOiAibG9jYXRpb24iLCAic3ViVHlwZSI6ICJDSVRZIiwgIm5hbWUiOiAiQVRMQU5UQSIsICJkZXRhaWxlZE5hbWUiOiAiQVRMQU5UQS9HQS9VUyIsICJpZCI6ICJDQVRMIiwgInNlbGYiOiB7ImhyZWYiOiAiaHR0cHM6Ly90ZXN0LmFwaS5hbWFkZXVzLmNvbS92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvQ0FUTCIsICJtZXRob2RzIjogWyJHRVQiXX0sICJ0aW1lWm9uZU9mZnNldCI6ICItMDU6MDAiLCAiaWF0YUNvZGUiOiAiQVRMIiwgImdlb0NvZGUiOiB7ImxhdGl0dWRlIjogMzMuNjQxMTIsICJsb25naXR1ZGUiOiAtODQuNDIyNzd9LCAiYWRkcmVzcyI6IHsiY2l0eU5hbWUiOiAiQVRMQU5UQSIsICJjaXR5Q29kZSI6ICJBVEwiLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJHQSIsICJyZWdpb25Db2RlIjogIk5BTUVSIn0sICJhbmFseXRpY3MiOiB7InRyYXZlbGVycyI6IHsic2NvcmUiOiA2MH19fSwgeyJ0eXBlIjogImxvY2F0aW9uIiwgInN1YlR5cGUiOiAiQ0lUWSIsICJuYW1lIjogIk5BTlRFUyIsICJkZXRhaWxlZE5hbWUiOiAiTkFOVEVTL0ZSIiwgImlkIjogIkNOVEUiLCAic2VsZiI6IHsiaHJlZiI6ICJodHRwczovL3Rlc3QuYXBpLmFtYWRldXMuY29tL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9DTlRFIiwgIm1ldGhvZHMiOiBbIkdFVCJdfSwgInRpbWVab25lT2Zmc2V0IjogIiswMTowMCIsICJpYXRhQ29kZSI6ICJOVEUiLCAiZ2VvQ29kZSI6IHsibGF0aXR1ZGUiOiA0Ny4xNTMwNiwgImxvbmdpdHVkZSI6IC0xLjYxMDgzfSwgImFkZHJlc3MiOiB7ImNpdHlOYW1lIjogIk5BTlRFUyIsICJjaXR5Q29kZSI6ICJOVEUiLCAiY291bnRyeU5hbWUiOiAiRlJBTkNFIiwgImNvdW50cnlDb2RlIjogIkZSIiwgInJlZ2lvbkNvZGUiOiAiRVVST1AifSwgImFuYWx5dGljcyI6IHsidHJhdmVsZXJzIjogeyJzY29yZSI6IDN9fX0sIHsidHlwZSI6ICJsb2NhdGlvbiIsICJzdWJUeXBlIjogIkNJVFkiLCAibmFtZSI6ICJBVExBTlRJQyBDSVRZIiwgImRldGFpbGVkTmFtZSI6ICJBVExBTlRJQyBDSVRZL05KL1VTIiwgImlkIjogIkNBQ1kiLCAic2VsZiI6IHsiaHJlZiI6ICJodHRwczovL3Rlc3QuYXBpLmFtYWRldXMuY29tL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9DQUNZIiwgIm1ldGhvZHMiOiBbIkdFVCJdfSwgInRpbWVab25lT2Zmc2V0IjogIi0wNTowMCIsICJpYXRhQ29kZSI6ICJBQ1kiLCAiZ2VvQ29kZSI6IHsibGF0aXR1ZGUiOiAzOS40NTc1LCAibG9uZ2l0dWRlIjogLTc0LjU3NzIyfSwgImFkZHJlc3MiOiB7ImNpdHlOYW1lIjogIkFUTEFOVElDIENJVFkiLCAiY2l0eUNvZGUiOiAiQUNZIiwgImNvdW50cnlOYW1lIjogIlVOSVRFRCBTVEFURVMgT0YgQU1FUklDQSIsICJjb3VudHJ5Q29kZSI6ICJVUyIsICJzdGF0ZUNvZGUiOiAiTkoiLCAicmVnaW9uQ29kZSI6ICJOQU1FUiJ9LCAiYW5hbHl0aWNzIjogeyJ0cmF2ZWxlcnMiOiB7InNjb3JlIjogMX19fSwgeyJ0eXBlIjogImxvY2F0aW9uIiwgInN1YlR5cGUiOiAiQ0lUWSIsICJuYW1lIjogIkFUTEFOVElDIiwgImRldGFpbGVkTmFtZSI6ICJBVExBTlRJQy9JQS9VUyIsICJpZCI6ICJDQUlPIiwgInNlbGYiOiB7ImhyZWYiOiAiaHR0cHM6Ly90ZXN0LmFwaS5hbWFkZXVzLmNvbS92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvQ0FJTyIsICJtZXRob2RzIjogWyJHRVQiXX0sICJ0aW1lWm9uZU9mZnNldCI6ICItMDY6MDAiLCAiaWF0YUNvZGUiOiAiQUlPIiwgImdlb0NvZGUiOiB7ImxhdGl0dWRlIjogNDEuNCwgImxvbmdpdHVkZSI6IC05NS4wMn0sICJhZGRyZXNzIjogeyJjaXR5TmFtZSI6ICJBVExBTlRJQyIsICJjaXR5Q29kZSI6ICJBSU8iLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJJQSIsICJyZWdpb25Db2RlIjogIk5BTUVSIn19XZRhdWIu	2025-02-24 10:42:33-05
:1:gtjgo:transit_search:eb2082ab39738d7e6641c2f2c10dfd5d		2025-02-24 10:59:48-05
:1:gtjgo:cities:64d5be12ccb204018d7270a7d6c8a6d0	gAWVPRUAAAAAAACMFGRqYW5nby5odHRwLnJlc3BvbnNllIwMSnNvblJlc3BvbnNllJOUKYGUfZQojAdoZWFkZXJzlGgAjA9SZXNwb25zZUhlYWRlcnOUk5QpgZR9lIwGX3N0b3JllH2UjAxjb250ZW50LXR5cGWUjAxDb250ZW50LVR5cGWUjBBhcHBsaWNhdGlvbi9qc29ulIaUc3NijAhfY2hhcnNldJROjBFfcmVzb3VyY2VfY2xvc2Vyc5RdlIwOX2hhbmRsZXJfY2xhc3OUTowHY29va2llc5SMDGh0dHAuY29va2llc5SMDFNpbXBsZUNvb2tpZZSTlCmBlIwGY2xvc2VklImMDl9yZWFzb25fcGhyYXNllE6MCl9jb250YWluZXKUXZRCExQAAFt7InR5cGUiOiAibG9jYXRpb24iLCAic3ViVHlwZSI6ICJDSVRZIiwgIm5hbWUiOiAiQVRMQU5UQSIsICJkZXRhaWxlZE5hbWUiOiAiQVRMQU5UQS9HQS9VUyIsICJpZCI6ICJDQVRMIiwgInNlbGYiOiB7ImhyZWYiOiAiaHR0cHM6Ly90ZXN0LmFwaS5hbWFkZXVzLmNvbS92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvQ0FUTCIsICJtZXRob2RzIjogWyJHRVQiXX0sICJ0aW1lWm9uZU9mZnNldCI6ICItMDU6MDAiLCAiaWF0YUNvZGUiOiAiQVRMIiwgImdlb0NvZGUiOiB7ImxhdGl0dWRlIjogMzMuNjQxMTIsICJsb25naXR1ZGUiOiAtODQuNDIyNzd9LCAiYWRkcmVzcyI6IHsiY2l0eU5hbWUiOiAiQVRMQU5UQSIsICJjaXR5Q29kZSI6ICJBVEwiLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJHQSIsICJyZWdpb25Db2RlIjogIk5BTUVSIn0sICJhbmFseXRpY3MiOiB7InRyYXZlbGVycyI6IHsic2NvcmUiOiA2MH19fSwgeyJ0eXBlIjogImxvY2F0aW9uIiwgInN1YlR5cGUiOiAiQ0lUWSIsICJuYW1lIjogIk5BTlRFUyIsICJkZXRhaWxlZE5hbWUiOiAiTkFOVEVTL0ZSIiwgImlkIjogIkNOVEUiLCAic2VsZiI6IHsiaHJlZiI6ICJodHRwczovL3Rlc3QuYXBpLmFtYWRldXMuY29tL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9DTlRFIiwgIm1ldGhvZHMiOiBbIkdFVCJdfSwgInRpbWVab25lT2Zmc2V0IjogIiswMTowMCIsICJpYXRhQ29kZSI6ICJOVEUiLCAiZ2VvQ29kZSI6IHsibGF0aXR1ZGUiOiA0Ny4xNTMwNiwgImxvbmdpdHVkZSI6IC0xLjYxMDgzfSwgImFkZHJlc3MiOiB7ImNpdHlOYW1lIjogIk5BTlRFUyIsICJjaXR5Q29kZSI6ICJOVEUiLCAiY291bnRyeU5hbWUiOiAiRlJBTkNFIiwgImNvdW50cnlDb2RlIjogIkZSIiwgInJlZ2lvbkNvZGUiOiAiRVVST1AifSwgImFuYWx5dGljcyI6IHsidHJhdmVsZXJzIjogeyJzY29yZSI6IDN9fX0sIHsidHlwZSI6ICJsb2NhdGlvbiIsICJzdWJUeXBlIjogIkNJVFkiLCAibmFtZSI6ICJBTVJJVFNBUiIsICJkZXRhaWxlZE5hbWUiOiAiQU1SSVRTQVIvUEIvSU4iLCAiaWQiOiAiQ0FUUSIsICJzZWxmIjogeyJocmVmIjogImh0dHBzOi8vdGVzdC5hcGkuYW1hZGV1cy5jb20vdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL0NBVFEiLCAibWV0aG9kcyI6IFsiR0VUIl19LCAidGltZVpvbmVPZmZzZXQiOiAiKzA1OjMwIiwgImlhdGFDb2RlIjogIkFUUSIsICJnZW9Db2RlIjogeyJsYXRpdHVkZSI6IDMxLjcwOTczLCAibG9uZ2l0dWRlIjogNzQuNzk3MjN9LCAiYWRkcmVzcyI6IHsiY2l0eU5hbWUiOiAiQU1SSVRTQVIiLCAiY2l0eUNvZGUiOiAiQVRRIiwgImNvdW50cnlOYW1lIjogIklORElBIiwgImNvdW50cnlDb2RlIjogIklOIiwgInN0YXRlQ29kZSI6ICJQQiIsICJyZWdpb25Db2RlIjogIkFTSUEifSwgImFuYWx5dGljcyI6IHsidHJhdmVsZXJzIjogeyJzY29yZSI6IDF9fX0sIHsidHlwZSI6ICJsb2NhdGlvbiIsICJzdWJUeXBlIjogIkNJVFkiLCAibmFtZSI6ICJBVExBTlRJQyBDSVRZIiwgImRldGFpbGVkTmFtZSI6ICJBVExBTlRJQyBDSVRZL05KL1VTIiwgImlkIjogIkNBQ1kiLCAic2VsZiI6IHsiaHJlZiI6ICJodHRwczovL3Rlc3QuYXBpLmFtYWRldXMuY29tL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9DQUNZIiwgIm1ldGhvZHMiOiBbIkdFVCJdfSwgInRpbWVab25lT2Zmc2V0IjogIi0wNTowMCIsICJpYXRhQ29kZSI6ICJBQ1kiLCAiZ2VvQ29kZSI6IHsibGF0aXR1ZGUiOiAzOS40NTc1LCAibG9uZ2l0dWRlIjogLTc0LjU3NzIyfSwgImFkZHJlc3MiOiB7ImNpdHlOYW1lIjogIkFUTEFOVElDIENJVFkiLCAiY2l0eUNvZGUiOiAiQUNZIiwgImNvdW50cnlOYW1lIjogIlVOSVRFRCBTVEFURVMgT0YgQU1FUklDQSIsICJjb3VudHJ5Q29kZSI6ICJVUyIsICJzdGF0ZUNvZGUiOiAiTkoiLCAicmVnaW9uQ29kZSI6ICJOQU1FUiJ9LCAiYW5hbHl0aWNzIjogeyJ0cmF2ZWxlcnMiOiB7InNjb3JlIjogMX19fSwgeyJ0eXBlIjogImxvY2F0aW9uIiwgInN1YlR5cGUiOiAiQ0lUWSIsICJuYW1lIjogIldBVEVSVE9XTiIsICJkZXRhaWxlZE5hbWUiOiAiV0FURVJUT1dOL1NEL1VTIiwgImlkIjogIkNBVFkiLCAic2VsZiI6IHsiaHJlZiI6ICJodHRwczovL3Rlc3QuYXBpLmFtYWRldXMuY29tL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9DQVRZIiwgIm1ldGhvZHMiOiBbIkdFVCJdfSwgInRpbWVab25lT2Zmc2V0IjogIi0wNjowMCIsICJpYXRhQ29kZSI6ICJBVFkiLCAiZ2VvQ29kZSI6IHsibGF0aXR1ZGUiOiA0NC45MTM4OSwgImxvbmdpdHVkZSI6IC05Ny4xNTQ3Mn0sICJhZGRyZXNzIjogeyJjaXR5TmFtZSI6ICJXQVRFUlRPV04iLCAiY2l0eUNvZGUiOiAiQVRZIiwgImNvdW50cnlOYW1lIjogIlVOSVRFRCBTVEFURVMgT0YgQU1FUklDQSIsICJjb3VudHJ5Q29kZSI6ICJVUyIsICJzdGF0ZUNvZGUiOiAiU0QiLCAicmVnaW9uQ29kZSI6ICJOQU1FUiJ9LCAiYW5hbHl0aWNzIjogeyJ0cmF2ZWxlcnMiOiB7InNjb3JlIjogMX19fSwgeyJ0eXBlIjogImxvY2F0aW9uIiwgInN1YlR5cGUiOiAiQ0lUWSIsICJuYW1lIjogIkFUS0EiLCAiZGV0YWlsZWROYW1lIjogIkFUS0EvQUsvVVMiLCAiaWQiOiAiQ0FLQiIsICJzZWxmIjogeyJocmVmIjogImh0dHBzOi8vdGVzdC5hcGkuYW1hZGV1cy5jb20vdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL0NBS0IiLCAibWV0aG9kcyI6IFsiR0VUIl19LCAidGltZVpvbmVPZmZzZXQiOiAiLTEwOjAwIiwgImlhdGFDb2RlIjogIkFLQiIsICJnZW9Db2RlIjogeyJsYXRpdHVkZSI6IDUyLjIsICJsb25naXR1ZGUiOiAtMTc0LjJ9LCAiYWRkcmVzcyI6IHsiY2l0eU5hbWUiOiAiQVRLQSIsICJjaXR5Q29kZSI6ICJBS0IiLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJBSyIsICJyZWdpb25Db2RlIjogIk5BTUVSIn0sICJhbmFseXRpY3MiOiB7InRyYXZlbGVycyI6IHsic2NvcmUiOiAxfX19LCB7InR5cGUiOiAibG9jYXRpb24iLCAic3ViVHlwZSI6ICJDSVRZIiwgIm5hbWUiOiAiQVRNQVVUTFVBSyIsICJkZXRhaWxlZE5hbWUiOiAiQVRNQVVUTFVBSy9BSy9VUyIsICJpZCI6ICJDQVRUIiwgInNlbGYiOiB7ImhyZWYiOiAiaHR0cHM6Ly90ZXN0LmFwaS5hbWFkZXVzLmNvbS92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvQ0FUVCIsICJtZXRob2RzIjogWyJHRVQiXX0sICJ0aW1lWm9uZU9mZnNldCI6ICItMDk6MDAiLCAiaWF0YUNvZGUiOiAiQVRUIiwgImdlb0NvZGUiOiB7ImxhdGl0dWRlIjogNjAuODY2NjcsICJsb25naXR1ZGUiOiAtMTYyLjI3MzF9LCAiYWRkcmVzcyI6IHsiY2l0eU5hbWUiOiAiQVRNQVVUTFVBSyIsICJjaXR5Q29kZSI6ICJBVFQiLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJBSyIsICJyZWdpb25Db2RlIjogIk5BTUVSIn0sICJhbmFseXRpY3MiOiB7InRyYXZlbGVycyI6IHsic2NvcmUiOiAxfX19LCB7InR5cGUiOiAibG9jYXRpb24iLCAic3ViVHlwZSI6ICJDSVRZIiwgIm5hbWUiOiAiQVBQTEVUT04iLCAiZGV0YWlsZWROYW1lIjogIkFQUExFVE9OL1dJL1VTIiwgImlkIjogIkNBVFciLCAic2VsZiI6IHsiaHJlZiI6ICJodHRwczovL3Rlc3QuYXBpLmFtYWRldXMuY29tL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9DQVRXIiwgIm1ldGhvZHMiOiBbIkdFVCJdfSwgInRpbWVab25lT2Zmc2V0IjogIi0wNjowMCIsICJpYXRhQ29kZSI6ICJBVFciLCAiZ2VvQ29kZSI6IHsibGF0aXR1ZGUiOiA0NC4yNTcyMywgImxvbmdpdHVkZSI6IC04OC41MTkxNn0sICJhZGRyZXNzIjogeyJjaXR5TmFtZSI6ICJBUFBMRVRPTiIsICJjaXR5Q29kZSI6ICJBVFciLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJXSSIsICJyZWdpb25Db2RlIjogIk5BTUVSIn0sICJhbmFseXRpY3MiOiB7InRyYXZlbGVycyI6IHsic2NvcmUiOiAxfX19LCB7InR5cGUiOiAibG9jYXRpb24iLCAic3ViVHlwZSI6ICJDSVRZIiwgIm5hbWUiOiAiQVRRQVNVSyIsICJkZXRhaWxlZE5hbWUiOiAiQVRRQVNVSy9BSy9VUyIsICJpZCI6ICJDQVRLIiwgInNlbGYiOiB7ImhyZWYiOiAiaHR0cHM6Ly90ZXN0LmFwaS5hbWFkZXVzLmNvbS92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvQ0FUSyIsICJtZXRob2RzIjogWyJHRVQiXX0sICJ0aW1lWm9uZU9mZnNldCI6ICItMDk6MDAiLCAiaWF0YUNvZGUiOiAiQVRLIiwgImdlb0NvZGUiOiB7ImxhdGl0dWRlIjogNzAuNDcsICJsb25naXR1ZGUiOiAtMTU3LjN9LCAiYWRkcmVzcyI6IHsiY2l0eU5hbWUiOiAiQVRRQVNVSyIsICJjaXR5Q29kZSI6ICJBVEsiLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJBSyIsICJyZWdpb25Db2RlIjogIk5BTUVSIn0sICJhbmFseXRpY3MiOiB7InRyYXZlbGVycyI6IHsic2NvcmUiOiAwfX19LCB7InR5cGUiOiAibG9jYXRpb24iLCAic3ViVHlwZSI6ICJDSVRZIiwgIm5hbWUiOiAiQVRIRU5TIiwgImRldGFpbGVkTmFtZSI6ICJBVEhFTlMvR0EvVVMiLCAiaWQiOiAiQ0FITiIsICJzZWxmIjogeyJocmVmIjogImh0dHBzOi8vdGVzdC5hcGkuYW1hZGV1cy5jb20vdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL0NBSE4iLCAibWV0aG9kcyI6IFsiR0VUIl19LCAidGltZVpvbmVPZmZzZXQiOiAiLTA1OjAwIiwgImlhdGFDb2RlIjogIkFITiIsICJnZW9Db2RlIjogeyJsYXRpdHVkZSI6IDMzLjk0ODYyLCAibG9uZ2l0dWRlIjogLTgzLjMyNjM4fSwgImFkZHJlc3MiOiB7ImNpdHlOYW1lIjogIkFUSEVOUyIsICJjaXR5Q29kZSI6ICJBSE4iLCAiY291bnRyeU5hbWUiOiAiVU5JVEVEIFNUQVRFUyBPRiBBTUVSSUNBIiwgImNvdW50cnlDb2RlIjogIlVTIiwgInN0YXRlQ29kZSI6ICJHQSIsICJyZWdpb25Db2RlIjogIk5BTUVSIn0sICJhbmFseXRpY3MiOiB7InRyYXZlbGVycyI6IHsic2NvcmUiOiAwfX19XZRhdWIu	2025-02-24 11:02:03-05
\.


--
-- TOC entry 5050 (class 0 OID 16398)
-- Dependencies: 220
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	auth	user
5	contenttypes	contenttype
6	sessions	session
7	favorites	favorite
8	transport	airport
9	transport	ride
10	transport	transitpass
11	transport	transitstation
12	transport	city
13	transport	transitline
\.


--
-- TOC entry 5048 (class 0 OID 16390)
-- Dependencies: 218
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2025-02-08 22:27:14.346496-05
2	auth	0001_initial	2025-02-08 22:27:14.42182-05
3	admin	0001_initial	2025-02-08 22:27:14.444825-05
4	admin	0002_logentry_remove_auto_add	2025-02-08 22:27:14.4529-05
5	admin	0003_logentry_add_action_flag_choices	2025-02-08 22:27:14.463674-05
6	contenttypes	0002_remove_content_type_name	2025-02-08 22:27:14.480635-05
7	auth	0002_alter_permission_name_max_length	2025-02-08 22:27:14.49363-05
8	auth	0003_alter_user_email_max_length	2025-02-08 22:27:14.501634-05
9	auth	0004_alter_user_username_opts	2025-02-08 22:27:14.510675-05
10	auth	0005_alter_user_last_login_null	2025-02-08 22:27:14.518634-05
11	auth	0006_require_contenttypes_0002	2025-02-08 22:27:14.520512-05
12	auth	0007_alter_validators_add_error_messages	2025-02-08 22:27:14.529524-05
13	auth	0008_alter_user_username_max_length	2025-02-08 22:27:14.542539-05
14	auth	0009_alter_user_last_name_max_length	2025-02-08 22:27:14.551479-05
15	auth	0010_alter_group_name_max_length	2025-02-08 22:27:14.562479-05
16	auth	0011_update_proxy_permissions	2025-02-08 22:27:14.572486-05
17	auth	0012_alter_user_first_name_max_length	2025-02-08 22:27:14.58048-05
18	sessions	0001_initial	2025-02-08 22:27:14.591745-05
19	favorites	0001_initial	2025-02-09 12:48:16.835445-05
20	transport	0001_initial	2025-02-09 16:43:06.393056-05
21	transport	0002_city_remove_ride_airport_remove_ride_user_and_more	2025-02-21 22:44:16.965529-05
\.


--
-- TOC entry 5065 (class 0 OID 16526)
-- Dependencies: 235
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
u1bzdkrwg4ikrqqg2eqinyft5lil9k83	.eJxVjDsOwjAQBe_iGlmJvzElPWew1t5dHEC2FCcV4u4QKQW0b2beS0TY1hK3TkucUZyFEqffLUF-UN0B3qHemsytrsuc5K7Ig3Z5bUjPy-H-HRTo5VtzIGvABW3IK8tu5DSlQTlMlCjbgMqC1p7ZZaYhWI9OaTOi9lZNxqB4fwDyyTfq:1thVKJ:GQCilUJyPwfBssNkjewA2Qfkzd8mJpealhPmktnRGeM	2025-02-24 10:03:59.886351-05
\.


--
-- TOC entry 5067 (class 0 OID 16536)
-- Dependencies: 237
-- Data for Name: favorites_favorite; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.favorites_favorite (id, type, item_data, created_at, user_id) FROM stdin;
2	HOTEL	{"name": "Renaissance Atlanta Midtown Hotel", "rating": "", "hotelId": "BRATLBDB", "location": "ATL"}	2025-02-09 23:17:52.933047-05	1
5	HOTEL	{"name": "Aloft Atlanta Downtown", "rating": "", "hotelId": "ALATL849", "location": "ATL"}	2025-02-10 09:56:34.249757-05	1
6	COUNTRY	{"name": "TOKYO", "region": "TOKYO"}	2025-02-10 09:58:12.659759-05	1
\.


--
-- TOC entry 5069 (class 0 OID 16576)
-- Dependencies: 239
-- Data for Name: transport_city; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.transport_city (id, name, country, transit_website) FROM stdin;
\.


--
-- TOC entry 5071 (class 0 OID 16582)
-- Dependencies: 241
-- Data for Name: transport_transitline; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.transport_transitline (id, name, line_type, description, schedule_url, map_url, operating_hours, frequency, city_id) FROM stdin;
\.


--
-- TOC entry 5073 (class 0 OID 16590)
-- Dependencies: 243
-- Data for Name: transport_transitpass; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.transport_transitpass (id, name, pass_type, price, currency, purchase_url, description, city_id) FROM stdin;
\.


--
-- TOC entry 5075 (class 0 OID 16598)
-- Dependencies: 245
-- Data for Name: transport_transitstation; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.transport_transitstation (id, name, address, latitude, longitude, accessibility, line_id) FROM stdin;
\.


--
-- TOC entry 5083 (class 0 OID 0)
-- Dependencies: 223
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- TOC entry 5084 (class 0 OID 0)
-- Dependencies: 225
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- TOC entry 5085 (class 0 OID 0)
-- Dependencies: 221
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 52, true);


--
-- TOC entry 5086 (class 0 OID 0)
-- Dependencies: 229
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_groups_id_seq', 1, false);


--
-- TOC entry 5087 (class 0 OID 0)
-- Dependencies: 227
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_id_seq', 2, true);


--
-- TOC entry 5088 (class 0 OID 0)
-- Dependencies: 231
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_user_permissions_id_seq', 1, false);


--
-- TOC entry 5089 (class 0 OID 0)
-- Dependencies: 233
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 1, false);


--
-- TOC entry 5090 (class 0 OID 0)
-- Dependencies: 219
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 13, true);


--
-- TOC entry 5091 (class 0 OID 0)
-- Dependencies: 217
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 21, true);


--
-- TOC entry 5092 (class 0 OID 0)
-- Dependencies: 236
-- Name: favorites_favorite_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.favorites_favorite_id_seq', 6, true);


--
-- TOC entry 5093 (class 0 OID 0)
-- Dependencies: 238
-- Name: transport_city_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.transport_city_id_seq', 1, false);


--
-- TOC entry 5094 (class 0 OID 0)
-- Dependencies: 240
-- Name: transport_transitline_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.transport_transitline_id_seq', 1, false);


--
-- TOC entry 5095 (class 0 OID 0)
-- Dependencies: 242
-- Name: transport_transitpass_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.transport_transitpass_id_seq', 1, false);


--
-- TOC entry 5096 (class 0 OID 0)
-- Dependencies: 244
-- Name: transport_transitstation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.transport_transitstation_id_seq', 1, false);


--
-- TOC entry 4885 (class 2606 OID 16628)
-- Name: api_cache_table api_cache_table_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.api_cache_table
    ADD CONSTRAINT api_cache_table_pkey PRIMARY KEY (cache_key);


--
-- TOC entry 4833 (class 2606 OID 16524)
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- TOC entry 4838 (class 2606 OID 16455)
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- TOC entry 4841 (class 2606 OID 16424)
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- TOC entry 4835 (class 2606 OID 16416)
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- TOC entry 4828 (class 2606 OID 16446)
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- TOC entry 4830 (class 2606 OID 16410)
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- TOC entry 4849 (class 2606 OID 16438)
-- Name: auth_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- TOC entry 4852 (class 2606 OID 16470)
-- Name: auth_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- TOC entry 4843 (class 2606 OID 16430)
-- Name: auth_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- TOC entry 4855 (class 2606 OID 16444)
-- Name: auth_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- TOC entry 4858 (class 2606 OID 16484)
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- TOC entry 4846 (class 2606 OID 16519)
-- Name: auth_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- TOC entry 4861 (class 2606 OID 16505)
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- TOC entry 4888 (class 2606 OID 16636)
-- Name: django_cache_table django_cache_table_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_cache_table
    ADD CONSTRAINT django_cache_table_pkey PRIMARY KEY (cache_key);


--
-- TOC entry 4823 (class 2606 OID 16404)
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- TOC entry 4825 (class 2606 OID 16402)
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- TOC entry 4821 (class 2606 OID 16396)
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- TOC entry 4865 (class 2606 OID 16532)
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- TOC entry 4868 (class 2606 OID 16542)
-- Name: favorites_favorite favorites_favorite_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.favorites_favorite
    ADD CONSTRAINT favorites_favorite_pkey PRIMARY KEY (id);


--
-- TOC entry 4871 (class 2606 OID 16544)
-- Name: favorites_favorite favorites_favorite_user_id_type_item_data_9e7124a0_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.favorites_favorite
    ADD CONSTRAINT favorites_favorite_user_id_type_item_data_9e7124a0_uniq UNIQUE (user_id, type, item_data);


--
-- TOC entry 4873 (class 2606 OID 16580)
-- Name: transport_city transport_city_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transport_city
    ADD CONSTRAINT transport_city_pkey PRIMARY KEY (id);


--
-- TOC entry 4876 (class 2606 OID 16588)
-- Name: transport_transitline transport_transitline_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transport_transitline
    ADD CONSTRAINT transport_transitline_pkey PRIMARY KEY (id);


--
-- TOC entry 4879 (class 2606 OID 16596)
-- Name: transport_transitpass transport_transitpass_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transport_transitpass
    ADD CONSTRAINT transport_transitpass_pkey PRIMARY KEY (id);


--
-- TOC entry 4882 (class 2606 OID 16602)
-- Name: transport_transitstation transport_transitstation_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transport_transitstation
    ADD CONSTRAINT transport_transitstation_pkey PRIMARY KEY (id);


--
-- TOC entry 4883 (class 1259 OID 16629)
-- Name: api_cache_table_expires; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX api_cache_table_expires ON public.api_cache_table USING btree (expires);


--
-- TOC entry 4831 (class 1259 OID 16525)
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- TOC entry 4836 (class 1259 OID 16466)
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- TOC entry 4839 (class 1259 OID 16467)
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- TOC entry 4826 (class 1259 OID 16452)
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- TOC entry 4847 (class 1259 OID 16482)
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_group_id_97559544 ON public.auth_user_groups USING btree (group_id);


--
-- TOC entry 4850 (class 1259 OID 16481)
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON public.auth_user_groups USING btree (user_id);


--
-- TOC entry 4853 (class 1259 OID 16496)
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON public.auth_user_user_permissions USING btree (permission_id);


--
-- TOC entry 4856 (class 1259 OID 16495)
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON public.auth_user_user_permissions USING btree (user_id);


--
-- TOC entry 4844 (class 1259 OID 16520)
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_username_6821ab7c_like ON public.auth_user USING btree (username varchar_pattern_ops);


--
-- TOC entry 4859 (class 1259 OID 16516)
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- TOC entry 4862 (class 1259 OID 16517)
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- TOC entry 4886 (class 1259 OID 16637)
-- Name: django_cache_table_expires; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_cache_table_expires ON public.django_cache_table USING btree (expires);


--
-- TOC entry 4863 (class 1259 OID 16534)
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- TOC entry 4866 (class 1259 OID 16533)
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- TOC entry 4869 (class 1259 OID 16550)
-- Name: favorites_favorite_user_id_69ee5ed6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX favorites_favorite_user_id_69ee5ed6 ON public.favorites_favorite USING btree (user_id);


--
-- TOC entry 4874 (class 1259 OID 16608)
-- Name: transport_transitline_city_id_9aae9a07; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX transport_transitline_city_id_9aae9a07 ON public.transport_transitline USING btree (city_id);


--
-- TOC entry 4877 (class 1259 OID 16614)
-- Name: transport_transitpass_city_id_8b8ca991; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX transport_transitpass_city_id_8b8ca991 ON public.transport_transitpass USING btree (city_id);


--
-- TOC entry 4880 (class 1259 OID 16620)
-- Name: transport_transitstation_line_id_47402d52; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX transport_transitstation_line_id_47402d52 ON public.transport_transitstation USING btree (line_id);


--
-- TOC entry 4890 (class 2606 OID 16461)
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4891 (class 2606 OID 16456)
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4889 (class 2606 OID 16447)
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4892 (class 2606 OID 16476)
-- Name: auth_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4893 (class 2606 OID 16471)
-- Name: auth_user_groups auth_user_groups_user_id_6a12ed8b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4894 (class 2606 OID 16490)
-- Name: auth_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4895 (class 2606 OID 16485)
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4896 (class 2606 OID 16506)
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4897 (class 2606 OID 16511)
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4898 (class 2606 OID 16545)
-- Name: favorites_favorite favorites_favorite_user_id_69ee5ed6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.favorites_favorite
    ADD CONSTRAINT favorites_favorite_user_id_69ee5ed6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4899 (class 2606 OID 16603)
-- Name: transport_transitline transport_transitline_city_id_9aae9a07_fk_transport_city_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transport_transitline
    ADD CONSTRAINT transport_transitline_city_id_9aae9a07_fk_transport_city_id FOREIGN KEY (city_id) REFERENCES public.transport_city(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4900 (class 2606 OID 16609)
-- Name: transport_transitpass transport_transitpass_city_id_8b8ca991_fk_transport_city_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transport_transitpass
    ADD CONSTRAINT transport_transitpass_city_id_8b8ca991_fk_transport_city_id FOREIGN KEY (city_id) REFERENCES public.transport_city(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4901 (class 2606 OID 16615)
-- Name: transport_transitstation transport_transitsta_line_id_47402d52_fk_transport; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transport_transitstation
    ADD CONSTRAINT transport_transitsta_line_id_47402d52_fk_transport FOREIGN KEY (line_id) REFERENCES public.transport_transitline(id) DEFERRABLE INITIALLY DEFERRED;


-- Completed on 2025-02-25 19:48:02

--
-- PostgreSQL database dump complete
--

